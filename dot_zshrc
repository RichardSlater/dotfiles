setopt histignorealldups sharehistory

# Use vi bindings, but restore history search
bindkey -v
bindkey ^R history-incremental-search-backward
bindkey ^S history-incremental-search-forward

# Keep 1000 lines of history within the shell and save it to ~/.zsh_history:
HISTSIZE=10000
SAVEHIST=10000
HISTFILE="$HOME/.cache/.zsh_history"

# configure editors
if command -v nvim &> /dev/null; then
  alias vi='nvim'
  alias vim='nvim'
  EDITOR=$(which nvim)
else
  EDITOR=vi
fi
VISUAL=$EDITOR

# convenience variables
export DISTRO_RELEASE=$(lsb_release --short --release | tr -d \")

# Use modern completion system
autoload -Uz compinit
compinit

# plugins
plugins=(
  git
  vi-mode
  zsh-autosuggestions
)

# zstyle
zstyle ':completion:*' auto-description 'specify: %d'
zstyle ':completion:*' completer _expand _complete _correct _approximate
zstyle ':completion:*' format 'Completing %d'
zstyle ':completion:*' group-name ''
zstyle ':completion:*' menu select=2
eval "$(dircolors -b)"
zstyle ':completion:*:default' list-colors ${(s.:.)LS_COLORS}
zstyle ':completion:*' list-colors ''
zstyle ':completion:*' list-prompt %SAt %p: Hit TAB for more, or the character to insert%s
zstyle ':completion:*' matcher-list '' 'm:{a-z}={A-Z}' 'm:{a-zA-Z}={A-Za-z}' 'r:|[._-]=* r:|=* l:|=*'
zstyle ':completion:*' menu select=long
zstyle ':completion:*' select-prompt %SScrolling active: current selection at %p%s
zstyle ':completion:*' use-compctl false
zstyle ':completion:*' verbose true
zstyle ':completion:*:*:kill:*:processes' list-colors '=(#b) #([0-9]#)*=0=01;31'
zstyle ':completion:*:kill:*' command 'ps -u $USER -o pid,%cpu,tty,cputime,cmd'

# set PATH so it includes user's private bin if it exists
[ -d "$HOME/bin" ] && PATH="$HOME/bin:$PATH"

# set PATH so it includes user's private bin if it exists
[ -d "$HOME/.local/bin" ] && PATH="$HOME/.local/bin:$PATH"

# set PATH so it includes GO's local bin if it exists
[ -d "/usr/local/go/bin" ] && PATH="/usr/local/go/bin:$PATH"

# set PATH so it includes local bin if it exists
[ -d "/usr/local/bin" ] && PATH="/usr/local/bin:$PATH"

# set NeoVim path if it exists
[ -d "/opt/nvim-linux64/bin" ] && PATH="$PATH:/opt/nvim-linux64/bin"

# set snap path
[ -d "/snap/bin" ] && PATH="$PATH:/snap/bin"

# foundry
[ -d "$HOME/.foundry/bin" ] && export PATH="$PATH:$HOME/.foundry/bin"

# Aliases
[ -f $HOME/.config/zsh_aliases ] && source $HOME/.config/zsh_aliases
[ -f $HOME/.config/windows_aliases ] && source $HOME/.config/windows_aliases

# zsh Syntax Highlighting
[ -f /usr/share/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh ] && source /usr/share/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh

# Fuzzy finder
if command -v fzf &> /dev/null; then
  source "$HOME/.config/.fzf.zsh"
fi

# chezmoi
if [ -f "$HOME/.local/chezmoi" ]; then
  chezmoi update
  chezmoi apply
fi

# keybinds
[ -f "$HOME/.config/zsh_keybinds" ] && source "$HOME/.config/zsh_keybinds"

# oh my posh
if command -v oh-my-posh &> /dev/null; then
  if [ -f "$HOME/.config/oh-my-posh/cloud-native-tokyo-night.omp.json" ]; then
    eval "$(oh-my-posh init zsh --config $HOME/.config/oh-my-posh/cloud-native-tokyo-night.omp.json)"
  else
    eval "$(oh-my-posh init zsh --config 'https://raw.githubusercontent.com/RichardSlater/dotfiles/master/dot_config/oh-my-posh/cloud-native-tokyo-night.omp.json')"
  fi
fi

if [ -f "$HOME/.nvm/nvm.sh" ]; then
  export NVM_DIR="$HOME/.nvm"
  "$NVM_DIR/nvm.sh"  # This loads nvm
fi

# >>> conda initialize >>>
# !! Contents within this block are managed by 'conda init' !!
__conda_setup="$('/home/rslater/miniconda3/bin/conda' 'shell.zsh' 'hook' 2> /dev/null)"
if [ $? -eq 0 ]; then
  eval "$__conda_setup"
else
  if [ -f "/home/rslater/miniconda3/etc/profile.d/conda.sh" ]; then
    . "/home/rslater/miniconda3/etc/profile.d/conda.sh"
  else
    export PATH="/home/rslater/miniconda3/bin:$PATH"
  fi
fi

unset __conda_setup
# <<< conda initialize <<<

# pnpm start
if [ -f "$HOME/.local/shar/pnpm" ]; then
  export PNPM_HOME="$HOME/.local/share/pnpm"
  case ":$PATH:" in
    *":$PNPM_HOME:"*) ;;
    *) export PATH="$PNPM_HOME:$PATH" ;;
  esac
fi
# pnpm end

# taskctl start
if command -v taskctl &> /dev/null; then
  . <(taskctl completion zsh)
fi
# taskctl end

[ -f "$HOME/.cargo/env" ] && . "$HOME/.cargo/env"
